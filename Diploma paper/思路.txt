- 相关技术分析
-- 容器化技术 (Docker & Kubernetes)
-- 资源管理平台 (YARN, Mesos, Borg, Corona)
-- 微服务架构 (Microservice architecture)
-- 即时通讯协议 (MQTT, XMPP)
-- 消息中间件 (Rabbitmq, 中间件的使用场景)

- 核心功能模块及关键技术研究与实现
-- 邻里社交子系统
--- 邻里社交模型
    1. 描述社交模型 (邻里间社交、实名制、以户为单位，一对一、群组、不同身份角色交互)
    2. 定义消息结构 （支持文本、语音、视频等信息）
    3. 描述一部分具体用例 （一对一聊天，群组聊天，居民咨询居委会人员政策、流程问题等）
--- 客户端状态管理
    1. 客户端状态管理需求 （管理客户端状态（实现广告推送，在线统计等），消息推送基石）
    2. 管理方案 （心跳 + expired status(redis expired key))
    3. 状态管理架构、流程
    4. 具体实现
    对ONLINE_STATUS_SERVER进行描述，怎样进行客户端状态管理，管理的机制，设计方案
--- 消息缓存、推送机制
    1. 消息缓存队列定义
    2. 消息分发微服务
    3. 用户在线、离线状态判断及推送决策
    4. 具体架构及实现 (高可用)
    消息中间件的使用，队列的定义，消息分发微服务，用户在线、离线状态判断

-- 基于微服务的社区管理子系统
--- 服务划分及容器化
    1. 对系统中服务进行描述，划分
    2. 阐述相应的技术选型
    3. 架构描述
    4. 微服务容器化及部署策略（Docker + Kubernetes)
--- 服务治理
    1. 服务的注册与发现 (Service level)
    2. 服务的调用统计、容量评估
    3. 服务的软负载均衡（软负载均衡算法，基于调用统计与机器性能的调度策略）

-- 统一资源管理平台
    小论文内容，更改YARN使其支持Long-lived service
    加入新的Docker容器管理框架Kubernetes的使用
--- 服务注册与发现 (framework level)
--- 日志管理（结合Docker与不结合Docker解决方案） 日志收集、日志聚合
--- 容器资源伸缩性（结合Docker以及不结合Docker）（scaling设计，auto-scaling机制应用）

